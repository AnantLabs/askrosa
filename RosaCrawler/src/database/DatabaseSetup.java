package database;
/**
  * Autogenerated by Lisptorq 0.1.4 
  * from database-setup.template
*/
import java.sql.*;
public final class DatabaseSetup{ 

    public static void main(String[] args) throws Exception{

        Database dbase = new Database(); //one-time initialization

        Connection conn = dbase.getCreationConnection();
        conn.setAutoCommit(false);
        Statement stmt = conn.createStatement();
        
    
//	stmt.execute("CREATE TABLE FtpSiteInfo ( id INTEGER NOT NULL auto_increment  , server VARCHAR(128) NOT NULL  , address VARCHAR(128) NOT NULL  , verify VARCHAR(128) NOT NULL  , access VARCHAR(128) NOT NULL DEFAULT 'anybody' , port INTEGER NOT NULL DEFAULT 21 , username VARCHAR(128) NOT NULL DEFAULT 'anonymous' , password VARCHAR(128) DEFAULT 'anonymous' , encoding VARCHAR(128) NOT NULL DEFAULT 'GBK' , admin VARCHAR(128) NOT NULL DEFAULT 'UNKNOWN' , contact VARCHAR(128) DEFAULT '' , description VARCHAR(5000) DEFAULT '' , updateTime TIMESTAMP  , lastUpdateTime TIMESTAMP  , totalFileCount INTEGER DEFAULT 0 , crawlInterval INTEGER DEFAULT 2 , video INTEGER DEFAULT 0 , audio INTEGER DEFAULT 0 , subtitle INTEGER DEFAULT 0 , document INTEGER DEFAULT 0 , text INTEGER DEFAULT 0 , program INTEGER DEFAULT 0 , image INTEGER DEFAULT 0 , compress INTEGER DEFAULT 0 , executable INTEGER DEFAULT 0 , directory INTEGER DEFAULT 0 , unknown INTEGER DEFAULT 0 , speed INTEGER DEFAULT 0 , userslimit INTEGER DEFAULT 0 , recursive SMALLINT DEFAULT 1 , location SMALLINT DEFAULT 0, hot INTEGER DEFAULT 0, CONSTRAINT MyUniqueKey UNIQUE (server,username), PRIMARY KEY ( id ) )");
//	stmt.execute("CREATE TABLE HistoryUsers ( id INTEGER NOT NULL auto_increment  , count bigint NOT NULL  , PRIMARY KEY ( id ) )");
//	stmt.execute("CREATE TABLE Sessions ( id INTEGER NOT NULL auto_increment  , createTime bigint NOT NULL  , destroyTime bigint  , PRIMARY KEY ( id ) )");
//	stmt.execute("CREATE TABLE QueryStatistics ( id INTEGER NOT NULL auto_increment  , keyword VARCHAR(512) NOT NULL  , time TIMESTAMP NOT NULL  , PRIMARY KEY ( id ) )");
//	stmt.execute("CREATE TABLE QueryStatisticsResult ( keyword VARCHAR(512) NOT NULL  , frequency INTEGER NOT NULL  )");
//	stmt.execute("CREATE TABLE ResourceRequest ( id INTEGER NOT NULL auto_increment  , nickname VARCHAR(512) NOT NULL DEFAULT 'anonymous' , resourcename VARCHAR(1024) NOT NULL  , email VARCHAR(128) NOT NULL  , time TIMESTAMP NOT NULL  ,state SMALLINT DEFAULT 0, PRIMARY KEY ( id ) )");
//	stmt.execute("CREATE TABLE Article ( id INTEGER NOT NULL auto_increment  , author VARCHAR(512) NOT NULL DEFAULT 'anonymous' , time TIMESTAMP NOT NULL  , title VARCHAR(512) NOT NULL  , content VARCHAR(10000) NOT NULL  , clickcount INTEGER NOT NULL  , ip VARCHAR(128) NOT NULL  , verify VARCHAR(64) NOT NULL  , PRIMARY KEY ( id ) )");
//	stmt.execute("CREATE TABLE ResponsePost ( postid INTEGER NOT NULL auto_increment  , id INTEGER NOT NULL , FOREIGN KEY ( id ) REFERENCES Article ( id )  , author VARCHAR(512) NOT NULL DEFAULT 'anonymous' , content VARCHAR(10000) NOT NULL  , time TIMESTAMP NOT NULL  , ip VARCHAR(128) NOT NULL  , verify VARCHAR(64) NOT NULL  , PRIMARY KEY ( postid ) )");
//	HistoryUsers his = new HistoryUsers();
//	his.setCount(100);
//	his.save();
        
        stmt.close();
        conn.commit();
        conn.close();
        Database.shutdown();    
    }

}
