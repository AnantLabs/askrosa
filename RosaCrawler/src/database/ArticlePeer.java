package database;

import java.net.UnknownHostException;

/**
  * Autogenerated by Lisptorq 0.1.4 
*/
public class ArticlePeer extends BaseArticlePeer 
{
    
    public static int TotalArticleNumber() throws Exception
    {
	Criteria c = new Criteria();
	Scroller<Article> scr = ArticlePeer.doSelect(c);
	return scr.size();
    }
    
    public static Scroller<Article> listPagedArticle(String keyword, String author,int from, int num, String dateFrom,
	    String dateTo,String sort)
    {
	try
	{
	    String sql = "SELECT a.*, count(r.id) as responsePostCount FROM  article a left join responsepost r  on a.id=r.id";
	    String where = " ";
	    boolean and = false;
	    if (!(keyword == null || keyword.trim().equals("")))
	    {
		where += " a.title like '%" + keyword.trim() + "%'";
		and = true;
	    }
	    if (!(author == null || author.trim().equals("")))
	    {
		if (and == true)
		    where += " and";
		where += " a.author like '%" + author.trim() + "%'";
		and = true;
	    }
	    if (!(dateFrom == null || dateFrom.trim().equals("")))
	    {
		if (and == true)
		    where += " and";
		where += " a.time > " + dateFrom.trim();
		and = true;
	    }
	    if (!(dateTo == null || dateTo.trim().equals("")))
	    {
		if (and == true)
		    where += " and";
		where += " a.time < " + dateTo.trim();
	    }
	    if (!where.trim().equals(""))
		sql += " where " + where;
            sql+=" group by a.id";
	    
	    if (sort == null)
		sort = "time";
	    if(sort.equals("responsePostCount"))
		sql += " order by " + sort + " DESC";
	    else sql += " order by a." + sort + " DESC";
	    sql += " limit " + from + "," + num;
	    return ArticlePeer.doSelect(sql);
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return null;
    }
    public static Scroller<Article> listPagedArticle(String keyword, String author,String dateFrom,
	    String dateTo)
    {
	try
	{
	    String sql = "select * from Article";
	    String where = " ";
	    boolean and = false;
	    if (!(keyword == null || keyword.trim().equals("")))
	    {
		where += " title like '%" + keyword.trim() + "%'";
		and = true;
	    }
	    if (!(author == null || author.trim().equals("")))
	    {
		if (and == true)
		    where += " and";
		where += " author like '%" + author.trim() + "%'";
		and = true;
	    }
	    if (!(dateFrom == null || dateFrom.trim().equals("")))
	    {
		if (and == true)
		    where += " and";
		where += " time > " + dateFrom.trim();
		and = true;
	    }
	    if (!(dateTo == null || dateTo.trim().equals("")))
	    {
		if (and == true)
		    where += " and";
		where += " time < " + dateTo.trim();
	    }
	    if (!where.trim().equals(""))
		sql += " where " + where;
	    return ArticlePeer.doSelect(sql);
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
	return null;
    } 
    public static String updateArticle(Article article)
    {
	try
	    {
		Criteria c = new Criteria();
		c.add(Article.ID, article.getId());
		c.add(Article.VERIFY, article.getVerify());
		Scroller<Article> scr = ArticlePeer.doSelect(c);
		if (!scr.hasNext())
		{
		    return "Verify incorrect";
		}
		article.save();
		return null;
	    }
	    catch (UnknownHostException e)
	    {
		e.printStackTrace();
		return e.getMessage();
	    }
	    catch (Exception e)
	    {
		e.printStackTrace();
		return e.getMessage();
	    }
    }
    public static String deleteArticle(Article article)
    {
	try
	    {   
		Criteria c = new Criteria();
		c.add(Article.ID,article.getId());
		c.add(Article.VERIFY, article.getVerify());
		Scroller<Article> scr = ArticlePeer.doSelect(c);
		if (!scr.hasNext())
		{
		    return "Verify incorrect";
		}		
		Criteria c1 = new Criteria();		
		c1.add(ResponsePost.ID, article.getId());
		ResponsePostPeer.doDelete(c1);
		ArticlePeer.doDelete(c);
		return null;
	    }
	    catch (UnknownHostException e)
	    {
		e.printStackTrace();
		return e.getMessage();
	    }
	    catch (Exception e)
	    {
		e.printStackTrace();
		return e.getMessage();
	    }
    }
}