/*
 * Generated by MyEclipse Struts Template path: templates/java/JavaClass.vtl
 */
package cn.askrosa.struts.action;

import java.io.IOException;
import java.rmi.NotBoundException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import searcher.FtpSearch;
import searcher.SearchParameter;
import searcher.SearchResult;
import searcher.SearchResultElement;
import cn.askrosa.others.PageIndexResult;
import cn.askrosa.struts.form.SearchForm;
import crawlerutils.RosaCrawlerConstants;
import database.FtpSitesManager;
import database.HistoryUsersPeer;

/**
 * MyEclipse Struts Creation date: 03-02-2008 XDoclet definition:
 * 
 * @struts.action path="/searchture" name="searchtrueForm" scope="request"
 *                validate="true"
 */
public class SearchAction extends Action
{
    /*
     * Generated Methods
     */

    public static String getKeyword(String keywordInclude, String keywordExclude, String server,
	    String dateFrom, String dateTo)
    {
	String keyword = "";
	keyword += keywordInclude;
	if (server.trim().length() > 0)
	{
	    if (keyword.trim().length() != 0)
		keyword += " AND ";
	    keyword += " server:" + server.trim();
	    FtpSitesManager.hotAdd(server.trim(), 1);
	}
	// 日期的三种组合方式
	if (keywordExclude.trim().length() > 0)
	{
	    if (keyword.trim().length() != 0)
		keyword += " AND ";
	    keyword += " NOT " + keywordExclude.trim();
	}
	if ((dateFrom.trim().length() > 0) && (dateTo.trim().length() == 0))
	{
	    if (keyword.trim().length() != 0)
		keyword += " AND ";
	    keyword += " date:[" + dateFrom.trim() + " TO null ]";
	}
	if ((dateFrom.trim().length() > 0) && (dateTo.trim().length() > 0))
	{
	    if (keyword.trim().length() != 0)
		keyword += " AND ";
	    keyword += " date:[" + dateFrom.trim() + " TO " + dateTo.trim() + "]";
	}
	if ((dateFrom.trim().length() == 0) && (dateTo.trim().length() > 0))
	{
	    if (keyword.trim().length() > 0)
		keyword += " AND";
	    keyword += " date:[ null TO " + dateTo.trim() + "]";
	}
	return keyword;
    }

    public ActionForward execute(ActionMapping mapping, ActionForm form,
	    HttpServletRequest request, HttpServletResponse response)
    {
	SearchForm searchForm = (SearchForm) form;
	// 定义错误
	ActionMessages errors = new ActionMessages();
	// 用户直接提出keyword
	String keyword = request.getParameter("keyword");
	String newRes = request.getParameter("newRes");

	// 如果是改变排序方式
	String sort = request.getParameter("sort");
	// 如果是改变页码
	String pageString = request.getParameter("pageIndex");
	// 如果是改变站点位置
	String location = request.getParameter("location");
	// 如果是要显示特定站点的要求
	String serverP = request.getParameter("serverP");
	// 如果是要显示特定类别
	String category = request.getParameter("category");
	
	// 得到需要显示的页码 只有更换页面时需要设置页码，其他情况下均为1
	int pageNumber = 1;
	// 设置每页显示的个数
	int rows = RosaCrawlerConstants.SEARCH_PAGE_SIZE;
	// 设置显示分页显示中页面的最多显示的个数
	int pageDisplayNumber = 11;

	if (pageString != null)
	{
	    pageNumber = Integer.parseInt(pageString);
	    keyword = searchForm.getKeyword();
	}
	else if (sort != null)
	{
	    searchForm.setSort(sort);
	    keyword = searchForm.getKeyword();
	}
	else if (location != null)
	{
	    // 优先级以location为高
	    // 得到通过页面得到的location
	    searchForm.setLocations(new short[]{(short) Integer.parseInt(location)});
	    keyword = searchForm.getKeyword();
	}
	else if (serverP != null)
	{
	    searchForm.setServer(serverP);
	    keyword = getKeyword(searchForm.getKeywordInclude(), searchForm.getKeywordExclude(),
		    searchForm.getServer(), searchForm.getDateFrom(), searchForm.getDateTo());
	    searchForm.setLocations(null);
	    searchForm.setKeyword(keyword);
	}
	else if (category != null)
	{
	    keyword = searchForm.getKeyword();
	    searchForm.setCategories(new String[]{category});
	}
	// 下面的新的搜索，不是调整原来搜索的显示
	else if (keyword != null)
	{
	    searchForm.resetall();
	    searchForm.setKeywordInclude(keyword);
	    searchForm.setKeyword(keyword);
	}
	else if (newRes != null)
	{
	    searchForm.resetall();
	    keyword = "date:[" + newRes.trim() + " TO null]";
	    searchForm.setDateFrom(newRes);
	    searchForm.setKeyword(keyword);
	}
	else
	{   
	    keyword = searchForm.getKeywordInclude();
	    if (keyword.trim().length() == 0)
	    {
		errors.add("keyword", new ActionMessage(
			"ftpsearch.jsp.search.error.keyword.missing", true));
		this.saveErrors(request, errors);
		return mapping.findForward("falseWelcomemainIndex");
	    }
	    if(searchForm.getSearch().equals("shooter"))
	    {	
		try
		{
		    String herf = "http://shooter.cn/search/Sub:"+java.net.URLEncoder.encode(keyword, "UTF-8")+"/";
		    response.sendRedirect(herf);
		}
		catch (Exception e)
		{
		    // TODO Auto-generated catch block
		    e.printStackTrace();
		}
		return null;
	    }
	    if(searchForm.getSearch().equals("njubt"))
	    {
		try
		{
		    String herf = "http://sofree2.njuftp.org/index.html?search="+java.net.URLEncoder.encode(keyword, "UTF-8");
		    response.sendRedirect(herf);
		}
		catch (Exception e)
		{
		    // TODO Auto-generated catch block
		    e.printStackTrace();
		}
		return null;		
	    }	    
	    keyword = getKeyword(keyword, searchForm.getKeywordExclude(), searchForm.getServer(), 
		    searchForm.getDateFrom(), searchForm.getDateTo());
	    searchForm.setSort(SearchParameter.DEFAULT_SORT_TYPE);
	    searchForm.setKeyword(keyword);
	}

	// 启动搜索参数
	SearchParameter parameter = new SearchParameter();
	parameter.setBegin((pageNumber - 1) * rows);
	parameter.setCount(rows);

	// 得到客户端的ip地址
	String remoteIp = request.getRemoteAddr();
	parameter.setRemoteIP(remoteIp);

	// 设置参数
	parameter.setKeyword(keyword);
	parameter.setSortType(searchForm.getSort());
	parameter.setCategories(searchForm.getCategories());
	parameter.setField(searchForm.getField());
	parameter.setLocations(searchForm.getLocations());
	parameter.setAccess(searchForm.getAccess());

	SearchResult res = new SearchResult();
	// 调用搜索模块
	try
	{
	    res = FtpSearch.search(parameter);
	}
	catch (ParseException e)
	{
	    errors.add("keyword", new ActionMessage(
		    "ftpsearch.jsp.search.error.keyword.parse.failed", true));
	    saveErrors(request, errors);
	}
	catch (IOException e)
	{
	    errors.add("keyword", new ActionMessage(e.getMessage(), false));
	    saveErrors(request, errors);
	}
	catch (NotBoundException e)
	{
	    errors.add("keyword", new ActionMessage(e.getMessage(), false));
	    saveErrors(request, errors);
	}
	catch (InvalidTokenOffsetsException e)
	{
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}
	// 结果处理
	List<SearchResultElement> outputList;
	outputList = res.getResultFileList();

	long delayTime = res.getDelay();
	int resultNumber = res.getHistNum();
	int resultPages = (int) Math.ceil(resultNumber / (double) rows);
	int numberEnd = resultNumber;
	if (pageNumber < resultPages)
	    numberEnd = pageNumber * rows;

	// 计算搜索次数，年月周日
	long[] countList =
	{ -1, -1, -1, -1, -1 };
	HistoryUsersPeer.getCountList(countList);
	String count = "第" + countList[0] + "次检索 今天第" + countList[4] + "次 本周第" + countList[3]
		+ "次 本月第" + countList[2] + "次 今年第" + countList[1] + "次 ";

	// 向页面传递参数
	request.setAttribute("count", count);
	request.setAttribute("outputList", outputList);
	request.setAttribute("numberBegin", (pageNumber - 1) * rows);
	request.setAttribute("numberEnd", numberEnd);
	request.setAttribute("delayTime", delayTime);
	request.setAttribute("resultNumber", resultNumber);
	request.setAttribute("sort", searchForm.getSort());
	// 计算第一列要多长的显示长度
	request.setAttribute("countlength", (Math.floor(Math.log10(numberEnd)) + 1) * 10 + 40);
	request.setAttribute("pages", PageIndexResult.getPageIndexResult(pageNumber,
		pageDisplayNumber, resultPages, "search.do?pageIndex="));
	return mapping.findForward("searchResult");
    }
}