/*
 * Generated by MyEclipse Struts Template path: templates/java/JavaClass.vtl
 */
package cn.askrosa.struts.action;

import java.io.IOException;
import java.rmi.NotBoundException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.lucene.queryParser.ParseException;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import searcher.FtpSearch;
import searcher.SearchParameter;
import searcher.SearchResult;
import searcher.SearchResultElement;

import cn.askrosa.others.PageIndexResult;
import cn.askrosa.struts.form.SearchForm;
import database.FtpSitesManager;
import database.HistoryUsersPeer;

/**
 * MyEclipse Struts Creation date: 03-02-2008 XDoclet definition:
 * 
 * @struts.action path="/searchture" name="searchtrueForm" scope="request"
 *                validate="true"
 */
public class SearchAction extends Action
{
    /*
     * Generated Methods
     */

    public ActionForward execute(ActionMapping mapping, ActionForm form,
	    HttpServletRequest request, HttpServletResponse response)
    {
	SearchForm searchForm = (SearchForm) form;
	ActionMessages errors = form.validate(mapping, request);
	if (!errors.isEmpty())
	{
	    this.saveErrors(request, errors);
	    if ("welcomemainIndex".equals(searchForm.getPageIndex()))
		return mapping.findForward("falseWelcomemainIndex");
	    if ("advancedSearch".equals(searchForm.getPageIndex()))
		return mapping.findForward("falseAdvancedSearch");
	    return mapping.findForward("falseWelcomemainIndex");
	}
	String serverP = request.getParameter("server");
	if (serverP != null && serverP.trim().length() > 0)
	{
	    searchForm.setPageIndex("advancedSearch");
	}
	boolean advancedSearch = false;
	String pageIndex = searchForm.getPageIndex();
	if (pageIndex != null && pageIndex.equals("advancedSearch"))
	    advancedSearch = true;

	int rows = 30;
	int pageDisplayNumber = 11;
	String sort = searchForm.getSort();
	if (sort == null)
	    sort = "default";
	String pageString = request.getParameter("pageLink");
	if (pageString == null)
	    pageString = "1";
	int pageNumber = Integer.parseInt(pageString);
	String location = request.getParameter("location");

	String remoteIp = request.getRemoteAddr();
	SearchParameter parameter = new SearchParameter();
	String keyword = searchForm.getKeyword();
	String[] categories = searchForm.getCategories();
	String keywordEx = searchForm.getKeywordExclude();
	String server = searchForm.getServer();
	String access = searchForm.getAccess();
	String dateFrom = searchForm.getDateFrom();
	String field = searchForm.getField();
	String dateTo = searchForm.getDateTo();
	short[] locations = searchForm.getLocations();
	if (location != null)
	{
	    locations = new short[1];
	    locations[0] = (short) Integer.parseInt(location);
	    searchForm.setLocations(locations);
	}

	if (advancedSearch)
	{
	    if (server != null && server.trim().length() > 0)
	    {
		keyword += " AND server:" + server.trim();
		FtpSitesManager.hotAdd(server, 1);
	    }
	    if (keywordEx != null && keywordEx.trim().length() > 0)
		keyword += " AND NOT " + keywordEx.trim();
	    if ((dateFrom != null && dateFrom.trim().length() > 0)
		    || (dateTo != null && dateTo.trim().length() > 0))
		keyword += " AND date:[" + dateFrom.trim() + " TO " + dateTo.trim() + "]";
	    if (access != null && access.trim().length() > 0)
	    {
		parameter.setAccess(access.trim());
	    }
	}
	parameter.setKeyword(keyword);
	parameter.setSortType(sort);
	parameter.setBegin((pageNumber - 1) * rows);
	parameter.setCount(rows);
	parameter.setRemoteIP(remoteIp);
	parameter.setCategories(categories);
	parameter.setField(field);
	parameter.setLocations(locations);

	SearchResult res = new SearchResult();
	try
	{
	    res = FtpSearch.search(parameter, !advancedSearch);
	}
	catch (ParseException e)
	{
	    errors.add("keyword", new ActionMessage(
		    "ftpsearch.jsp.search.error.keyword.parse.failed", true));
	    saveErrors(request, errors);
	}
	catch (IOException e)
	{
	    errors.add("keyword", new ActionMessage(e.getMessage(), false));
	    saveErrors(request, errors);
	}
	catch (NotBoundException e)
	{
	    errors.add("keyword", new ActionMessage(e.getMessage(), false));
	    saveErrors(request, errors);
	}
	// 发现用户输入 错误，返回到输入的页面。

	List<SearchResultElement> outputList;
	outputList = res.getResultFileList();

	long delayTime = res.getDelay();
	int resultNumber = res.getHistNum();
	int resultPages = (int) Math.ceil(resultNumber / (double) rows);
	int numberEnd = resultNumber;
	if (pageNumber < resultPages)
	    numberEnd = pageNumber * rows;

	// 计算第一列要多长的显示长度
	int i = 1;
	int tennumber = 10;
	while (numberEnd / tennumber >= 1)
	{
	    tennumber *= 10;
	    i++;
	}
	int countlength = (i) * 8 + 42;

	long[] countList =
	{ -1, -1, -1, -1, -1 };
	HistoryUsersPeer.getCountList(countList);
	String count = "第" + countList[0] + "次检索 今天第" + countList[4] + "次 本周第" + countList[3]
		+ "次 本月第" + countList[2] + "次 今年第" + countList[1] + "次 ";

	request.setAttribute("count", count);
	request.setAttribute("outputList", outputList);
	request.setAttribute("numberBegin", (pageNumber - 1) * rows + 1);
	request.setAttribute("numberEnd", numberEnd);
	request.setAttribute("keyword", keyword);
	request.setAttribute("delayTime", delayTime);
	request.setAttribute("resultNumber", resultNumber);
	request.setAttribute("sort", sort);
	request.setAttribute("countlength", countlength);
	request.setAttribute("pageIndex", PageIndexResult.getPageIndexResult(pageNumber,
		pageDisplayNumber, resultPages, "search.do?pageLink="));
	return mapping.findForward("searchResult");
    }
}