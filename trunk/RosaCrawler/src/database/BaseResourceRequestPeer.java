package database;

/**
 * Autogenerated by Lisptorq 0.1.4
 */
import java.sql.*;

public class BaseResourceRequestPeer
{

    public static void doInsert(BaseResourceRequest args0) throws Exception
    {
	Connection connection = Database.getConnection();
	doSave(args0, false, connection);
	Database.release(connection);
    }

    public static void doInsert(BaseResourceRequest args0, Connection connection) throws Exception
    {
	doSave(args0, false, connection);
    }

    public static void doUpdate(BaseResourceRequest args0) throws Exception
    {
	Connection connection = Database.getConnection();
	doSave(args0, true, connection);
	Database.release(connection);
    }

    public static void doUpdate(BaseResourceRequest args0, Connection connection) throws Exception
    {
	doSave(args0, true, connection);
    }

    private static void doSave(BaseResourceRequest args0, boolean isUpdate, Connection connection)
	    throws Exception
    {

	Statement statement = connection.createStatement();
	String query = "";
	if (isUpdate)
	{
	    query = "UPDATE ResourceRequest SET " + " nickname = "
		    + Criteria.escape(args0.getNickname()) + " , " + " resourcename = "
		    + Criteria.escape(args0.getResourcename()) + " , " + " email = "
		    + Criteria.escape(args0.getEmail()) + " , " + " time = "
		    + Criteria.escape(args0.getTime()) + " , " + " deadline = "
		    + Criteria.escape(args0.getDeadline()) + "," + " disply = "
		    + Criteria.escape(args0.getDisply()) + " , " + " state = "
		    + Criteria.escape(args0.getState()) + " WHERE " + " id = "
		    + Criteria.escape(args0.getId()) + "";
	    statement.executeUpdate(query);
	}
	else
	{
	    query = "INSERT INTO ResourceRequest ( nickname , resourcename , email , time ,deadline , disply , state ) VALUES ( "
		    + Criteria.escape(args0.getNickname())
		    + " , "
		    + Criteria.escape(args0.getResourcename())
		    + " , "
		    + Criteria.escape(args0.getEmail())
		    + " , "
		    + Criteria.escape(args0.getTime())
		    + " , " 
		    + Criteria.escape(args0.getDeadline())
		    + " , "
		    + Criteria.escape(args0.getDisply())
		    + " , "
		    + Criteria.escape(args0.getState()) + " )";
	    statement.execute(query, Statement.RETURN_GENERATED_KEYS);
	    ResultSet rs = statement.getGeneratedKeys();
	    if (rs.next())
	    {
		args0.id = rs.getInt(1);
	    }
	}
	statement.close();
	args0.saved = true;
    }

    public static void doDelete(Criteria args0) throws Exception
    {
	Connection connection = Database.getConnection();
	doDelete(args0, connection);
	Database.release(connection);
    }

    public static void doDelete(Criteria args0, Connection connection) throws Exception
    {
	Statement statement = connection.createStatement();
	statement.executeUpdate(args0.deleteSQL("RESOURCEREQUEST"));
	statement.close();
    }

    public static void doDelete(BaseResourceRequest args0) throws Exception
    {
	Connection connection = Database.getConnection();
	doDelete(args0, connection);
	Database.release(connection);
    }

    public static void doDelete(BaseResourceRequest args0, Connection connection) throws Exception
    {
	Statement statement = connection.createStatement();
	statement.executeUpdate("DELETE FROM ResourceRequest WHERE " + " id = "
		+ Criteria.escape(args0.getId()) + "");
	statement.close();
	args0.saved = false;
    }

    public static Scroller<ResourceRequest> doSelect(Criteria args0) throws Exception
    {
	return doSelect(args0
		.selectSQL(
			"RESOURCEREQUEST.ID,RESOURCEREQUEST.NICKNAME,RESOURCEREQUEST.RESOURCENAME,RESOURCEREQUEST.EMAIL,RESOURCEREQUEST.TIME,RESOURCEREQUEST.DEADLINE,RESOURCEREQUEST.DISPLY,RESOURCEREQUEST.STATE",
			"RESOURCEREQUEST"));
    }

    public static Scroller<ResourceRequest> doSelect(String sql) throws Exception
    {
	return new ResourceRequestScroller(sql, false);
    }

    public static Scroller<ResourceRequest> doSelect(Criteria args0, boolean recycle)
	    throws Exception
    {
	return doSelect(
		args0
			.selectSQL(
				"RESOURCEREQUEST.ID,RESOURCEREQUEST.NICKNAME,RESOURCEREQUEST.RESOURCENAME,RESOURCEREQUEST.EMAIL,RESOURCEREQUEST.TIME,RESOURCEREQUEST.DEADLINE,RESOURCEREQUEST.DISPLY,RESOURCEREQUEST.STATE",
				"RESOURCEREQUEST"), recycle);
    }

    public static Scroller<ResourceRequest> doSelect(String sql, boolean recycle) throws Exception
    {
	return new ResourceRequestScroller(sql, recycle);
    }

    protected static ResourceRequest getBean(ResultSet results, ResourceRequest ret)
	    throws Exception
    {

	ret.id = results.getInt("ID");
	ret.nickname = results.getString("NICKNAME");
	ret.resourcename = results.getString("RESOURCENAME");
	ret.email = results.getString("EMAIL");
	ret.time = results.getDate("TIME");
	ret.deadline = results.getDate("DEADLINE");
	ret.disply = results.getShort("DISPLY");
	ret.state = results.getShort("STATE");

	ret.saved = true;

	return ret;
    }

    private static class ResourceRequestScroller implements Scroller<ResourceRequest>
    {

	Statement statement;

	ResultSet results;

	boolean recycle = false;

	ResourceRequest cache = null;

	private ResourceRequestScroller(String sql, boolean recycle) throws Exception
	{

	    Connection connection = Database.getConnection();
	    statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
		    ResultSet.CONCUR_READ_ONLY);
	    results = statement.executeQuery(sql);
	    Database.release(connection);
	    this.recycle = recycle;

	}

	public ResourceRequest next()
	{
	    try
	    {
		cache = (recycle && cache != null) ? BaseResourceRequestPeer
			.getBean(results, cache) : BaseResourceRequestPeer.getBean(results,
			new ResourceRequest());
		return cache;
	    }
	    catch (Exception ignore)
	    {
		return null;
	    }
	}

	public boolean hasNext()
	{
	    try
	    {
		if (results.next())
		{
		    return true;
		}
		else
		{
		    return false;
		}
	    }
	    catch (Exception ignore)
	    {
		return false;
	    }
	}

	public ResourceRequest previous()
	{
	    try
	    {
		cache = (recycle && cache != null) ? BaseResourceRequestPeer
			.getBean(results, cache) : BaseResourceRequestPeer.getBean(results,
			new ResourceRequest());
		return cache;
	    }
	    catch (Exception ignore)
	    {		
		return null;
	    }
	}

	public boolean hasPrevious()
	{
	    try
	    {
		if (results.previous())
		{
		    return true;
		}
		else
		{
		    return false;
		}
	    }
	    catch (Exception ignore)
	    {
		return false;
	    }
	}

	public void absolute(int position)
	{
	    try
	    {
		results.absolute(position);
	    }
	    catch (Exception ignore)
	    {
	    }
	}

	public void remove() throws UnsupportedOperationException
	{
	    throw new UnsupportedOperationException();
	}

	public int size()
	{
	    try
	    {
		results.last();
		int size = results.getRow();
		results.beforeFirst();
		return size;
	    }
	    catch (SQLException e)
	    {
		e.printStackTrace();
	    }
	    return 0;
	}

	protected void finalize() throws Throwable
	{
	    try
	    {
		statement.close();
	    }
	    catch (Exception ignore)
	    {
	    }
	}

    }

}
