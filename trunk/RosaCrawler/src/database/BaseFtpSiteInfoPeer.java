package database;
/**
  * Autogenerated by Lisptorq 0.1.4 
*/
import java.sql.*;

public class BaseFtpSiteInfoPeer  { 

	public static void doInsert(BaseFtpSiteInfo args0)
	throws Exception{
        Connection connection = Database.getConnection(); 
        doSave(args0,false,connection);
        Database.release(connection);
	} 

	public static void doInsert(BaseFtpSiteInfo args0,Connection connection)
	throws Exception{ 
        doSave(args0,false,connection);
	} 

	public static void doUpdate(BaseFtpSiteInfo args0)
	throws Exception{ 	
        Connection connection = Database.getConnection(); 
        doSave(args0,true,connection);
        Database.release(connection);
    }

	public static void doUpdate(BaseFtpSiteInfo args0,Connection connection)
	throws Exception{ 	
        doSave(args0,true,connection);
    }

	private static void doSave(BaseFtpSiteInfo args0, boolean isUpdate, Connection connection)
	throws Exception{ 

        Statement statement = connection.createStatement();        
        String query = "";
        if(isUpdate){
            query = "UPDATE FtpSiteInfo SET " + " server = " + Criteria.escape(args0.getServer()) + " , " + " address = " + Criteria.escape(args0.getAddress()) + " , " + " verify = " + Criteria.escape(args0.getVerify()) + " , " + " access = " + Criteria.escape(args0.getAccess()) + " , " + " port = " + Criteria.escape(args0.getPort()) + " , " + " username = " + Criteria.escape(args0.getUsername()) + " , " + " password = " + Criteria.escape(args0.getPassword()) + " , " + " encoding = " + Criteria.escape(args0.getEncoding()) + " , " + " admin = " + Criteria.escape(args0.getAdmin()) + " , " + " contact = " + Criteria.escape(args0.getContact()) + " , " + " description = " + Criteria.escape(args0.getDescription()) + " , " + " updateTime = " + Criteria.escape(args0.getUpdateTime()) + " , " + " lastUpdateTime = " + Criteria.escape(args0.getLastUpdateTime()) + " , " + " totalFileCount = " + Criteria.escape(args0.getTotalFileCount()) + " , " + " crawlInterval = " + Criteria.escape(args0.getCrawlInterval()) + " , " + " video = " + Criteria.escape(args0.getVideo()) + " , " + " audio = " + Criteria.escape(args0.getAudio()) + " , " + " subtitle = " + Criteria.escape(args0.getSubtitle()) + " , " + " document = " + Criteria.escape(args0.getDocument()) + " , " + " text = " + Criteria.escape(args0.getText()) + " , " + " program = " + Criteria.escape(args0.getProgram()) + " , " + " image = " + Criteria.escape(args0.getImage()) + " , " + " compress = " + Criteria.escape(args0.getCompress()) + " , " + " executable = " + Criteria.escape(args0.getExecutable()) + " , " + " directory = " + Criteria.escape(args0.getDirectory()) + " , " + " unknown = " + Criteria.escape(args0.getUnknown()) + " , " + " speed = " + Criteria.escape(args0.getSpeed()) + " , " + " userslimit = " + Criteria.escape(args0.getUserslimit()) + " , " + " recursive = " + Criteria.escape(args0.getRecursive()) + " , " + " location = " + Criteria.escape(args0.getLocation()) + " , " + " hot = " + Criteria.escape(args0.getHot()) + " WHERE " + " id = " + Criteria.escape(args0.getId()) + "";
            statement.executeUpdate(query);
        }else{
            query = "INSERT INTO FtpSiteInfo ( server , address , verify , access , port , username , password , encoding , admin , contact , description , updateTime , lastUpdateTime , totalFileCount , crawlInterval , video , audio , subtitle , document , text , program , image , compress , executable , directory , unknown , speed , userslimit , recursive , location , hot ) VALUES ( " + Criteria.escape(args0.getServer()) + " , " + Criteria.escape(args0.getAddress()) + " , " + Criteria.escape(args0.getVerify()) + " , " + Criteria.escape(args0.getAccess()) + " , " + Criteria.escape(args0.getPort()) + " , " + Criteria.escape(args0.getUsername()) + " , " + Criteria.escape(args0.getPassword()) + " , " + Criteria.escape(args0.getEncoding()) + " , " + Criteria.escape(args0.getAdmin()) + " , " + Criteria.escape(args0.getContact()) + " , " + Criteria.escape(args0.getDescription()) + " , " + Criteria.escape(args0.getUpdateTime()) + " , " + Criteria.escape(args0.getLastUpdateTime()) + " , " + Criteria.escape(args0.getTotalFileCount()) + " , " + Criteria.escape(args0.getCrawlInterval()) + " , " + Criteria.escape(args0.getVideo()) + " , " + Criteria.escape(args0.getAudio()) + " , " + Criteria.escape(args0.getSubtitle()) + " , " + Criteria.escape(args0.getDocument()) + " , " + Criteria.escape(args0.getText()) + " , " + Criteria.escape(args0.getProgram()) + " , " + Criteria.escape(args0.getImage()) + " , " + Criteria.escape(args0.getCompress()) + " , " + Criteria.escape(args0.getExecutable()) + " , " + Criteria.escape(args0.getDirectory()) + " , " + Criteria.escape(args0.getUnknown()) + " , " + Criteria.escape(args0.getSpeed()) + " , " + Criteria.escape(args0.getUserslimit()) + " , " + Criteria.escape(args0.getRecursive()) + " , " + Criteria.escape(args0.getLocation()) + " , " + Criteria.escape(args0.getHot()) + " )";         
            statement.execute(query,Statement.RETURN_GENERATED_KEYS);
            ResultSet rs = statement.getGeneratedKeys();
            if(rs.next()){
                args0.id=rs.getInt(1);
            }
        }   
        statement.close();  
        args0.saved = true;      
	}
 
	public static void doDelete(Criteria args0)
	throws Exception{ 
        Connection connection = Database.getConnection();
        doDelete(args0,connection);
        Database.release(connection);
    } 

	public static void doDelete(Criteria args0, Connection connection)
	throws Exception{ 
        Statement statement = connection.createStatement();
        statement.executeUpdate(args0.deleteSQL("FTPSITEINFO"));
        statement.close();
    } 

	public static void doDelete(BaseFtpSiteInfo args0)
	throws Exception{ 
        Connection connection = Database.getConnection();
        doDelete(args0,connection);
        Database.release(connection);
    } 

	public static void doDelete(BaseFtpSiteInfo args0, Connection connection)
	throws Exception{ 
        Statement statement = connection.createStatement();
        statement.executeUpdate("DELETE FROM FtpSiteInfo WHERE " + " id = " + Criteria.escape(args0.getId()) + "");
        statement.close();
        args0.saved = false; 	
    } 

	public static Scroller<FtpSiteInfo> doSelect(Criteria args0)
	throws Exception{ 
		return doSelect(args0.selectSQL("FTPSITEINFO.ID,FTPSITEINFO.SERVER,FTPSITEINFO.ADDRESS,FTPSITEINFO.VERIFY,FTPSITEINFO.ACCESS,FTPSITEINFO.PORT,FTPSITEINFO.USERNAME,FTPSITEINFO.PASSWORD,FTPSITEINFO.ENCODING,FTPSITEINFO.ADMIN,FTPSITEINFO.CONTACT,FTPSITEINFO.DESCRIPTION,FTPSITEINFO.UPDATETIME,FTPSITEINFO.LASTUPDATETIME,FTPSITEINFO.TOTALFILECOUNT,FTPSITEINFO.CRAWLINTERVAL,FTPSITEINFO.VIDEO,FTPSITEINFO.AUDIO,FTPSITEINFO.SUBTITLE,FTPSITEINFO.DOCUMENT,FTPSITEINFO.TEXT,FTPSITEINFO.PROGRAM,FTPSITEINFO.IMAGE,FTPSITEINFO.COMPRESS,FTPSITEINFO.EXECUTABLE,FTPSITEINFO.DIRECTORY,FTPSITEINFO.UNKNOWN,FTPSITEINFO.SPEED,FTPSITEINFO.USERSLIMIT,FTPSITEINFO.RECURSIVE,FTPSITEINFO.LOCATION,FTPSITEINFO.HOT","FTPSITEINFO"));
	} 

	public static Scroller<FtpSiteInfo> doSelect(String sql)
	throws Exception{         
        return new  FtpSiteInfoScroller(sql,false);
	} 

	public static Scroller<FtpSiteInfo> doSelect(Criteria args0, boolean recycle)
	throws Exception{ 
		return doSelect(args0.selectSQL("FTPSITEINFO.ID,FTPSITEINFO.SERVER,FTPSITEINFO.ADDRESS,FTPSITEINFO.VERIFY,FTPSITEINFO.ACCESS,FTPSITEINFO.PORT,FTPSITEINFO.USERNAME,FTPSITEINFO.PASSWORD,FTPSITEINFO.ENCODING,FTPSITEINFO.ADMIN,FTPSITEINFO.CONTACT,FTPSITEINFO.DESCRIPTION,FTPSITEINFO.UPDATETIME,FTPSITEINFO.LASTUPDATETIME,FTPSITEINFO.TOTALFILECOUNT,FTPSITEINFO.CRAWLINTERVAL,FTPSITEINFO.VIDEO,FTPSITEINFO.AUDIO,FTPSITEINFO.SUBTITLE,FTPSITEINFO.DOCUMENT,FTPSITEINFO.TEXT,FTPSITEINFO.PROGRAM,FTPSITEINFO.IMAGE,FTPSITEINFO.COMPRESS,FTPSITEINFO.EXECUTABLE,FTPSITEINFO.DIRECTORY,FTPSITEINFO.UNKNOWN,FTPSITEINFO.SPEED,FTPSITEINFO.USERSLIMIT,FTPSITEINFO.RECURSIVE,FTPSITEINFO.LOCATION,FTPSITEINFO.HOT","FTPSITEINFO"),recycle);
	} 

	public static Scroller<FtpSiteInfo> doSelect(String sql, boolean recycle)
	throws Exception{         
        return new  FtpSiteInfoScroller(sql,recycle);
	} 

	protected static FtpSiteInfo getBean(ResultSet results, FtpSiteInfo ret)
	throws Exception{ 

				ret.id=results.getInt("ID");
				ret.server=results.getString("SERVER");
				ret.address=results.getString("ADDRESS");
				ret.verify=results.getString("VERIFY");
				ret.access=results.getString("ACCESS");
				ret.port=results.getInt("PORT");
				ret.username=results.getString("USERNAME");
				ret.password=results.getString("PASSWORD");
				ret.encoding=results.getString("ENCODING");
				ret.admin=results.getString("ADMIN");
				ret.contact=results.getString("CONTACT");
				ret.description=results.getString("DESCRIPTION");
				ret.updateTime=results.getDate("UPDATETIME");
				ret.lastUpdateTime=results.getDate("LASTUPDATETIME");
				ret.totalFileCount=results.getInt("TOTALFILECOUNT");
				ret.crawlInterval=results.getInt("CRAWLINTERVAL");
				ret.video=results.getInt("VIDEO");
				ret.audio=results.getInt("AUDIO");
				ret.subtitle=results.getInt("SUBTITLE");
				ret.document=results.getInt("DOCUMENT");
				ret.text=results.getInt("TEXT");
				ret.program=results.getInt("PROGRAM");
				ret.image=results.getInt("IMAGE");
				ret.compress=results.getInt("COMPRESS");
				ret.executable=results.getInt("EXECUTABLE");
				ret.directory=results.getInt("DIRECTORY");
				ret.unknown=results.getInt("UNKNOWN");
				ret.speed=results.getInt("SPEED");
				ret.userslimit=results.getInt("USERSLIMIT");
				ret.recursive=results.getShort("RECURSIVE");
				ret.location=results.getShort("LOCATION");
				ret.hot=results.getInt("HOT");
        
    
        ret.saved = true;        
                
        return ret;   
	} 


    private static class FtpSiteInfoScroller implements Scroller<FtpSiteInfo>{

        Statement statement;
        ResultSet results;   
        boolean recycle = false;  
        FtpSiteInfo cache = null;    

        private FtpSiteInfoScroller(String sql,boolean recycle) throws Exception{

            Connection connection = Database.getConnection();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            results = statement.executeQuery(sql);
            Database.release(connection);
            this.recycle = recycle;
            
        }

        public FtpSiteInfo next(){        
            try{     
                cache = (recycle && cache != null)?  BaseFtpSiteInfoPeer.getBean(results, cache) : 
                                                     BaseFtpSiteInfoPeer.getBean(results, new FtpSiteInfo());
                return cache;
            }catch(Exception ignore){
                return null;
            }
        }

        public boolean hasNext(){
            try{
                if(results.next()){
                    return true;
                }else{
                    return false;   
                }
            }catch(Exception ignore){
                return false;
            }
        }

        public FtpSiteInfo previous(){        
            try{     
                cache = (recycle && cache != null)?  BaseFtpSiteInfoPeer.getBean(results, cache) : 
                                                     BaseFtpSiteInfoPeer.getBean(results, new FtpSiteInfo());
                return cache;
            }catch(Exception ignore){
                return null;
            }
        }

        public boolean hasPrevious(){
            try{
                if(results.previous()){
                    return true;
                }else{
                    return false;   
                }
            }catch(Exception ignore){
                return false;
            }
        }

        public void absolute(int position){
            try{results.absolute(position);}catch(Exception ignore){}    
        }

        public void remove() throws UnsupportedOperationException{ throw new UnsupportedOperationException(); }
	/*
	 * zhonghua add
	 */
        public int  size()
        {
            try
	    {
		results.last();
	        int size = results.getRow();
	        results.beforeFirst();
	        return size;
	    }
	    catch (SQLException e)
	    {
		e.printStackTrace();
	    }
	    return 0;
        }

        protected void finalize() throws Throwable{
            try{statement.close();}catch(Exception ignore){}
        }

    }


}
