package database;
/**
  * Autogenerated by Lisptorq 0.1.4 
*/
import java.sql.*;

public class BaseResponsePostPeer  { 

	public static void doInsert(BaseResponsePost args0)
	throws Exception{
        Connection connection = Database.getConnection(); 
        doSave(args0,false,connection);
        Database.release(connection);
	} 

	public static void doInsert(BaseResponsePost args0,Connection connection)
	throws Exception{ 
        doSave(args0,false,connection);
	} 

	public static void doUpdate(BaseResponsePost args0)
	throws Exception{ 	
        Connection connection = Database.getConnection(); 
        doSave(args0,true,connection);
        Database.release(connection);
    }

	public static void doUpdate(BaseResponsePost args0,Connection connection)
	throws Exception{ 	
        doSave(args0,true,connection);
    }

	private static void doSave(BaseResponsePost args0, boolean isUpdate, Connection connection)
	throws Exception{ 

        Statement statement = connection.createStatement();        
        String query = "";
        if(isUpdate){
            query = "UPDATE ResponsePost SET " + " id = " + Criteria.escape(args0.getId()) + " , " + " author = " + Criteria.escape(args0.getAuthor()) + " , " + " content = " + Criteria.escape(args0.getContent()) + " , " + " time = " + Criteria.escape(args0.getTime()) + " , " + " ip = " + Criteria.escape(args0.getIp()) + " , " + " verify = " + Criteria.escape(args0.getVerify()) + " WHERE " + " postid = " + Criteria.escape(args0.getPostid()) + "";
            statement.executeUpdate(query);
        }else{
            query = "INSERT INTO ResponsePost ( id , author , content , time , ip , verify ) VALUES ( " + Criteria.escape(args0.getId()) + " , " + Criteria.escape(args0.getAuthor()) + " , " + Criteria.escape(args0.getContent()) + " , " + Criteria.escape(args0.getTime()) + " , " + Criteria.escape(args0.getIp()) + " , " + Criteria.escape(args0.getVerify()) + " )";         
            statement.execute(query,Statement.RETURN_GENERATED_KEYS);
            ResultSet rs = statement.getGeneratedKeys();
            if(rs.next()){
                args0.postid=rs.getInt(1);
            }
        }   
        statement.close();  
        args0.saved = true;      
	}
 
	public static void doDelete(Criteria args0)
	throws Exception{ 
        Connection connection = Database.getConnection();
        doDelete(args0,connection);
        Database.release(connection);
    } 

	public static void doDelete(Criteria args0, Connection connection)
	throws Exception{ 
        Statement statement = connection.createStatement();
        statement.executeUpdate(args0.deleteSQL("RESPONSEPOST"));
        statement.close();
    } 

	public static void doDelete(BaseResponsePost args0)
	throws Exception{ 
        Connection connection = Database.getConnection();
        doDelete(args0,connection);
        Database.release(connection);
    } 

	public static void doDelete(BaseResponsePost args0, Connection connection)
	throws Exception{ 
        Statement statement = connection.createStatement();
        statement.executeUpdate("DELETE FROM ResponsePost WHERE " + " postid = " + Criteria.escape(args0.getPostid()) + "");
        statement.close();
        args0.saved = false; 	
    } 

	public static Scroller<ResponsePost> doSelect(Criteria args0)
	throws Exception{ 
		return doSelect(args0.selectSQL("RESPONSEPOST.POSTID,RESPONSEPOST.ID,RESPONSEPOST.AUTHOR,RESPONSEPOST.CONTENT,RESPONSEPOST.TIME,RESPONSEPOST.IP,RESPONSEPOST.VERIFY","RESPONSEPOST"));
	} 

	public static Scroller<ResponsePost> doSelect(String sql)
	throws Exception{         
        return new  ResponsePostScroller(sql,false);
	} 

	public static Scroller<ResponsePost> doSelect(Criteria args0, boolean recycle)
	throws Exception{ 
		return doSelect(args0.selectSQL("RESPONSEPOST.POSTID,RESPONSEPOST.ID,RESPONSEPOST.AUTHOR,RESPONSEPOST.CONTENT,RESPONSEPOST.TIME,RESPONSEPOST.IP,RESPONSEPOST.VERIFY","RESPONSEPOST"),recycle);
	} 

	public static Scroller<ResponsePost> doSelect(String sql, boolean recycle)
	throws Exception{         
        return new  ResponsePostScroller(sql,recycle);
	} 

	protected static ResponsePost getBean(ResultSet results, ResponsePost ret)
	throws Exception{ 

				ret.postid=results.getInt("POSTID");
				ret.id=results.getInt("ID");
				ret.author=results.getString("AUTHOR");
				ret.content=results.getString("CONTENT");
				ret.time=results.getTimestamp("TIME");
				ret.ip=results.getString("IP");
				ret.verify=results.getString("VERIFY");
        
    
        ret.saved = true;        
                
        return ret;   
	} 


    private static class ResponsePostScroller implements Scroller<ResponsePost>{

        Statement statement;
        ResultSet results;   
        boolean recycle = false;  
        ResponsePost cache = null;    

        private ResponsePostScroller(String sql,boolean recycle) throws Exception{

            Connection connection = Database.getConnection();
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
            results = statement.executeQuery(sql);
            Database.release(connection);
            this.recycle = recycle;
            
        }

        public ResponsePost next(){        
            try{     
                cache = (recycle && cache != null)?  BaseResponsePostPeer.getBean(results, cache) : 
                                                     BaseResponsePostPeer.getBean(results, new ResponsePost());
                return cache;
            }catch(Exception ignore){
                return null;
            }
        }

        public boolean hasNext(){
            try{
                if(results.next()){
                    return true;
                }else{
                    return false;   
                }
            }catch(Exception ignore){
                return false;
            }
        }

        public ResponsePost previous(){        
            try{     
                cache = (recycle && cache != null)?  BaseResponsePostPeer.getBean(results, cache) : 
                                                     BaseResponsePostPeer.getBean(results, new ResponsePost());
                return cache;
            }catch(Exception ignore){
                return null;
            }
        }

        public boolean hasPrevious(){
            try{
                if(results.previous()){
                    return true;
                }else{
                    return false;   
                }
            }catch(Exception ignore){
                return false;
            }
        }

        public void absolute(int position){
            try{results.absolute(position);}catch(Exception ignore){}    
        }

        public void remove() throws UnsupportedOperationException{ throw new UnsupportedOperationException(); }
        public int  size()   throws UnsupportedOperationException{ throw new UnsupportedOperationException(); }

        protected void finalize() throws Throwable{
            try{statement.close();}catch(Exception ignore){}
        }

    }


}
