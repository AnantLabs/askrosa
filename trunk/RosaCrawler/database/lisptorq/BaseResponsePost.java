package FtpSiteInfo id REQUIRED PRIMARY AUTO INTEGER server REQUIRED VARCHAR 128 address REQUIRED VARCHAR 128 verify REQUIRED VARCHAR 128 access REQUIRED VARCHAR 128 DEFAULT anybody port REQUIRED INTEGER DEFAULT 21 username REQUIRED VARCHAR 128 DEFAULT anonymous password VARCHAR 128 DEFAULT anonymous encoding REQUIRED VARCHAR 128 DEFAULT GBK admin REQUIRED VARCHAR 128 DEFAULT UNKNOWN contact VARCHAR 128 DEFAULT " description VARCHAR 5000 DEFAULT " updateTime TIMESTAMP lastUpdateTime TIMESTAMP totalFileCount INTEGER DEFAULT 0 crawlInterval INTEGER DEFAULT 2 video INTEGER DEFAULT 0 audio INTEGER DEFAULT 0 subtitle INTEGER DEFAULT 0 document INTEGER DEFAULT 0 text INTEGER DEFAULT 0 program INTEGER DEFAULT 0 image INTEGER DEFAULT 0 compress INTEGER DEFAULT 0 executable INTEGER DEFAULT 0 directory INTEGER DEFAULT 0 unknown INTEGER DEFAULT 0 speed INTEGER DEFAULT 0 userslimit INTEGER DEFAULT 0 recursive SMALLINT DEFAULT 1 location SMALLINT DEFAULT 0 hot INTEGER DEFAULT 0 HistoryUsers id REQUIRED PRIMARY AUTO INTEGER count REQUIRED BIGINTEGER Sessions id REQUIRED PRIMARY AUTO INTEGER createTime REQUIRED BIGINTEGER destroyTime BIGINTEGER QueryStatistics id REQUIRED PRIMARY AUTO INTEGER keyword REQUIRED VARCHAR 512 time REQUIRED TIMESTAMP QueryStatisticsResult keyword REQUIRED VARCHAR 512 frequency REQUIRED INTEGER ResourceRequest id REQUIRED PRIMARY AUTO INTEGER nickname REQUIRED VARCHAR 512 DEFAULT anonymous resourcename REQUIRED VARCHAR 1024 email REQUIRED VARCHAR 128 time REQUIRED TIMESTAMP deadline REQUIRED TIMESTAMP disply SMALLINT DEFAULT 1 state SMALLINT DEFAULT 0 ResourcePost id REQUIRED PRIMARY AUTO INTEGER nickname REQUIRED VARCHAR 512 DEFAULT anonymous resourcename REQUIRED VARCHAR 1024 address REQUIRED VARCHAR 128 time REQUIRED TIMESTAMP port REQUIRED INTEGER DEFAULT 21 username REQUIRED VARCHAR 512 DEFAULT anonymous passwd REQUIRED VARCHAR 512 DEFAULT anonymous Article id REQUIRED PRIMARY AUTO INTEGER author REQUIRED VARCHAR 512 DEFAULT anonymous time REQUIRED TIMESTAMP title REQUIRED VARCHAR 512 content REQUIRED VARCHAR 10000 clickcount REQUIRED INTEGER DEFAULT 0 ip REQUIRED VARCHAR 128 verify REQUIRED VARCHAR 64 ResponsePost postid REQUIRED PRIMARY AUTO INTEGER id REQUIRED INTEGER FOREIGN Article author REQUIRED VARCHAR 512 DEFAULT anonymous content REQUIRED VARCHAR 10000 time REQUIRED TIMESTAMP ip REQUIRED VARCHAR 128 verify REQUIRED VARCHAR 64;
/**
  * Autogenerated by Lisptorq 0.1.4 
*/
import java.sql.*;
import java.util.Iterator;
public class BaseResponsePost  { 
	public static final String VERIFY  = "RESPONSEPOST.VERIFY"; 
	public static final String TIME  = "RESPONSEPOST.TIME"; 
	public static final String AUTHOR  = "RESPONSEPOST.AUTHOR"; 
	public static final String POSTID  = "RESPONSEPOST.POSTID"; 
	protected String verify; 
	protected Date time; 
	protected String author  = "anonymous"; 
	protected int id; 
	protected int postid; 
	protected Article _article  = null; 
	protected String content; 
	protected String ip; 
	protected boolean saved  = false; 
	public static final String ID  = "RESPONSEPOST.ID"; 
	public static final String CONTENT  = "RESPONSEPOST.CONTENT"; 
	public static final String IP  = "RESPONSEPOST.IP"; 

	public void save()
	throws Exception{ 
		if(saved){
			BaseResponsePostPeer.doUpdate(this);
		}else{
			BaseResponsePostPeer.doInsert(this);
		}
	} 

	public String getIp(){ 
		return ip;
	} 

	public String getContent(){ 
		return content;
	} 

	public int getId(){ 
		return id;
	} 

	public String getAuthor(){ 
		return author;
	} 

	public Date getTime(){ 
		return time;
	} 

	public String getVerify(){ 
		return verify;
	} 

	public void setArticle(Article args0){ 
		_article=args0;
		id=args0.getId();
	} 

	public void setId(int args0){ 
		_article=null;
		id=args0;
	} 

	public Article getArticle(){ 

        if(_article != null) return _article;

        try{        

            Criteria crit = new Criteria();
            crit.add(Article.ID,id);
            java.util.Iterator iter = BaseArticlePeer.doSelect(crit);
            if(iter.hasNext()){
              _article = (Article) iter.next();
              return _article;
            }
     
        }catch(Exception ignore){}
        
        return null;
	} 

	public void setVerify(String args0){ 
		verify =args0;
	} 

	public void setTime(Date args0){ 
		time =args0;
	} 

	public void setAuthor(String args0){ 
		author =args0;
	} 

	/**
	  * postid is autogenerated 
	*/
	public int getPostid(){ 
		return postid;
	} 

	public void setContent(String args0){ 
		content =args0;
	} 

	public void setIp(String args0){ 
		ip =args0;
	} 
}